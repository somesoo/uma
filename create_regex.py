# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"[AT]GA"

test_str = ("GATGGGGAACCCCCTCAGCA\n"
	"GTGATTGAACAGAGCTACAA\n"
	"GAAAAGGGCCATGCTGGTCA\n"
	"GGCTGGTGCCCATGTACGTG\n"
	"GTGCTGGGCTTGGAGTCCCT\n"
	"GTCTGAAGCGCCTGACAGGC\n"
	"GTTTTCTATTATTCGACCAG\n"
	"GTGTTGTTGGTGGAGCGGGC\n"
	"GAGCGAGTTCCAGCCATGAG\n"
	"GAGGCTATGGGGCCCTACGT\n"
	"CTGAACATCTCCTTCCCAGC\n"
	"GGTTATGTGGTCCGAATCAG\n"
	"GAGAGAAGGATATTCCTGGA\n"
	"GTAAGAAACCTAGGACCAAA\n"
	"GAGGCTAAGGAGAAGCGCCA\n"
	"TTGAGGAGGAGAACCCGGAC\n"
	"GGATGGGGGTGTCTACGGTG\n"
	"ACATACAGTGTAGACAAGCA\n"
	"GCCTGTGCAGTGGGACTGAT\n"
	"TTTGCCATCTTTCTGTCTCT\n"
	"GTGATGTCAGAGTTTAATAA\n"
	"TTTAAGTGCTGTGGGGCTGC\n"
	"GGCTGTGTGGAGAAGATTGG\n"
	"GTTTTGGGAATTGTCTTTGC\n"
	"CCTTCAAAGCTGGAGTCTGT\n"
	"CAAGGAGGAAGCCTGGGAAG\n"
	"CTTGATTCCTGCCATATGGA\n"
	"CCGAAAGGAAAGAAGGCCAA\n"
	"GACAGGACATCCAGCCCAAA\n"
	"CTACTCAGCTGCTTAAGCTG\n"
	"GAGTTAACACCGTCACCACC\n"
	"CTGGTTGTCTTCTTGCCTGC\n"
	"GGAAGACAAAGGCGCTTTGG\n"
	"ATCCGCCGTCACTGGGGTGG\n"
	"ACCATGTCTGCAAAGGAGAA\n"
	"ATCTGCCTTCTTCCTGTTTT\n"
	"GATATTGCTGCATATCGTGC\n"
	"CTGGGCGCCGTGTACACAGA\n"
	"GGACCCTGAAGGCCAAGAAC\n"
	"TCTCCCGGGACCTGCCCGTT\n"
	"GTAACTATGGCCTTCGGGAT\n"
	"ACCCTCTCCCCCTACAACAA\n"
	"GTGGCTGAGAAGGTGGGTTG\n"
	"ACCCCATGCTGCACTATGTG\n"
	"GGAGGACTTCTACAAGCTGG\n"
	"GAGTGCCAAGACCTACGCCT\n"
	"GGACCCCAACATGGGCGACT\n"
	"GTGCGAAGCCCAGCGGTGCA\n"
	"CCTTTGTGTCCAAGCAGGAG\n"
	"AGCCCCAGTCCCCTACCCGG\n"
	"GTTTGGGGACGACATCCCTG\n"
	"ACATCACAGTCATCTGCCCT\n"
	"GACTTACACCAGAGGATCGA\n"
	"GGCTGGACATCCACTTCATC\n"
	"GGTTCAACTCGGTGGCCACC\n"
	"CCACGTGAAAGGCCTGCACT\n"
	"GCTCTGCTCTGAATGACTCT\n"
	"GAAGTTCTCCCTGGACGACC\n"
	"GATGAAGGTCTATGTGCCCA\n"
	"ACCACCATCATGGCAGTGGA\n"
	"CGAGGCGGTGGTGAACCGAG\n"
	"GATAGAACTGGAGGAACCTC\n"
	"GTATATGGAACCCTGGGAGG\n"
	"CTATTGCTCTGGCCATGAGC\n"
	"ATTAGTGATGATGAACCAGG\n"
	"GACTGAACGTCTTGCTCGAG\n"
	"AATGACCAGTCAACAGGGGA\n"
	"AATGTCTTGATTGTGGAAGT\n"
	"GATATAATTGACACTGGCAA\n"
	"CTTGCTGGTGAAAAGGACCC\n"
	"TTGTTGGATTTGAAATTCCA\n"
	"CATGTTTGTGTCATTAGTGA\n"
	"TTTTTCTTGATCATGAAAAC\n"
	"ACTGAATTTTGGAAGCAGTA\n"
	"ATGGAGATCAGTGTGAGTCC\n"
	"ATGTAACATGTAACATTAAG\n"
	"TGCCATTTCCATGTGGAAGA\n"
	"GTTGTTTTGAATGGTAAAGT\n"
	"GTGAACATAATATTGAGGAG\n"
	"CTGGCCCACGCCATCCGCCT\n"
	"CTCCTGACTATGACAGAAGC\n"
	"CTGCCCTACCTGATTGATGG\n"
	"GTGGGGAGACAGAAGAGGAG\n"
	"GAGAAACTGAAGCCAGAATA\n"
	"ATCACCTTTGTAGATTTCCT\n"
	"GGCTTGGAGAAGATCTCTGC\n"
	"GTGAAGTGTCCGGACGCACC\n"
	"GGAATGCTGGCAGGATAAGG\n"
	"AAGTGGTCGACCAGAAGGCC\n"
	"ATCGTTCGTCCATCCAACCA\n"
	"ATGCGCCTGGAGAAGGACAG\n"
	"GATGAACATGGTTTCATCTC\n"
	"ATCACTGGCAAGTGGTTTTA\n"
	"CCAGAACCAGTGCTTCTATA\n"
	"AGGGAGGCCGAGAACATGTT\n"
	"CTGACAAGCCAGAGACGACC\n"
	"GATAAGTGTGAGCCACTGGA\n"
	"CCCTGCAGCTGCTGCTGTGG\n"
	"TGTGCCACCTACAAGCTGTG\n"
	"GCAGGCTGCTTGAGCCAACT\n"
	"ATGGAAGAACTGGGAATGGC\n"
	"GTGCAGTTTTGCCAAGGAGT\n"
	"TGTAAAGCTTTCTGATGGAA\n"
	"GGCTGAGAATTCATAAAAAA\n"
	"CTGCCTGGACCACCTCATCC\n"
	"GATGACCTATGCCAAGAGTG\n"
	"GACACGATGAGGAAGTTCCT\n"
	"GACTCAAACGGCATCTGTAT\n"
	"GATCTCTCCGAGCAGCAATT\n"
	"GGTGCGCTACGTGTGGCAGT\n"
	"GGTCGCCGACAGGAGAATGG\n"
	"TGCAAGCAATTTGTGGAGCA\n"
	"GCCCTCGGGGTGTGTGGGAC\n"
	"GATCCTGGGTGAATAAATTC\n"
	"AACTCGAGAAGTGCTTCTGC\n"
	"TTCAAGCACCAAGGCACGAT\n"
	"GGAGCTGATTCATCTGAAGA\n"
	"AAATTTTTGCGTAGAATTGG\n"
	"TATGGGTATGGCCCTTATCA\n"
	"ACAAGGGCATGGCCCCCGCC\n"
	"GTATGATCAGCAACTTGCTT\n"
	"CTGAGTTCACCACGCCCGAT\n"
	"GTTCTCCCTGGAGACTGAAG\n"
	"ACCAAGAGCCTCTCCACGTC\n"
	"CTGTCATAGTCTCAGCCCGC\n"
	"GAACAGTCCTTTTCATGGGC\n"
	"ACTGAGAAGAACAACAAATA\n"
	"GTCTCCGGGCTGCTGAAGAG\n"
	"GTGACAGTTCGTGATGCTAT\n"
	"GTTAGTCGAGGGCTGTGGAA\n"
	"ATGGGCTTTGCTGGAATTGC\n"
	"GCTGGGTTGCGGCCCATTTG\n"
	"TGGTGGTGCTAGAGAATGAA\n"
	"GAACACATATAACTGTGGTT\n"
	"GTGATAAATATGCGTACCAT\n"
	"GTCCTGCGTTCAATTTCCTG\n"
	"GTGGATGAAGACTACATCCA\n"
	"ATGAAGAACTGGAAGACAAC\n"
	"TTGGAAAAGTACCAGCAAGG\n"
	"GCCTTTCAGACATCCCAGGT\n"
	"GCTCTACGGTTTCAAGATCC\n"
	"GTCAGGGAATCCCAGTGATA\n"
	"ACCCTGCCCGGCCCTGGAAC\n"
	"TCATCCCAGGGCCCCCAGCC\n"
	"CTCGCAATCCCTCAACAATC\n"
	"AGAGTGCCTACTTGAACTTG\n"
	"GCACACCTTCACCCTCTCTC\n"
	"ACCCCCCAGAGGTAAGCGTC\n"
	"GTGTGATGAGGCCCAAGTGC\n"
	"GAGCCCACACGCATCCCCCG\n"
	"AAGCCCAAGTACCAGGTCCG\n"
	"GTAAGACCCTCGGAGCTGGA\n"
	"CCACGGCCCATGCTGATGAG\n"
	"GCCCTGTACTGGTCATCACG\n"
	"GGACAGTGGCTTCTCCAGCC\n"
	"ACCTGGACAAGGAGGATGGA\n"
	"TGCATCCACCGGGACGTGGC\n"
	"GCCCGCCTGCCTGTGAAGTG\n"
	"GGCTGAATCCCTACCCTGGC\n"
	"ATACAGCATCATGCAGGCCT\n"
	"GACTATACCAATCTGCCGAG\n"
	"GATGATAAGGATGCCTTCTA\n"
	"ACTGAAATACAGTTGGTGCA\n"
	"GTTGGTTTTGCGGATTGCCA\n"
	"CTTCCATGTAGGAAGCGGCT\n"
	"GCTGAGGTTGGTTTCAGCAT\n"
	"ATCACCGGCGTAATCAACCC\n"
	"ACGAAGATGAGTCGAGTGAG\n"
	"AGACCTAAACCAGATGAGAA\n"
	"GCAACTCATGCAGCAATTCC\n"
	"AAGGAACCCAATGTGGCTCG\n"
	"AATTGGGGGGTTCTATGCTC\n"
	"GTGCATATAATTGGCCACAT\n"
	"GTATGAGAACACCCTGGCTG\n"
	"GTTACCGTGTGTACCAAATA\n"
	"GCCCAGCCCCAGCCCAGGGG\n"
	"GGAGTGGTTTTCAGAGACAT\n"
	"TAAGACCTATGGCAACGTGC\n"
	"GTGCTGATCATCGGGGGCGG\n"
	"GATGTCATCCAAGTCTCCAA\n"
	"GCCCCGCCGAAAGTCTCTTC\n"
	"GCGAGTGCCAGTGGCTGCAC\n"
	"AGCACGAACTTCCAGGAGCC\n"
	"GCACTGAATGATGTGAGCTG\n"
	"GATAGAGCCTCCTCAAATCC\n"
	"GGGCTGGGGAGAACACCAAA\n"
	"ACCTGGCCATAAGGGACACC\n"
	"CCAAGTGGAAGACAACATTT\n"
	"GTGGGGCAGCTGCAGCTCTC\n"
	"AATTCTTCGATTTTTCTTAT\n"
	"TTTTGGGAGGTTATCAGTGA\n"
	"GAGGAAATTATGTCCCCAGA\n"
	"GCCAATCCGGAGCCGGCAAC\n"
	"TTTCCATGTGGTACACACTC\n"
	"GGCGTGATGGTGGGCATGGG\n"
	"ATCATGTTTGAGACCTTCAA\n"
	"GCATGGAGTCCTGTGGCATC\n"
	"ATCATTGCTCCTCCTGAGCG\n"
	"GGCCGCGCGGGGCGCTGAGC\n"
	"GTGGCTTCGTGGCCCATGTG\n"
	"GGCCACCATCTGTGCAAGTA\n"
	"CACCTGGGCTGTCCCCCATG\n"
	"GTTACACTCCTCTTCCTGGG\n"
	"GATGGCACATTTCCTAGAGG\n"
	"ATACAAGGCAGTTGTGAAGC\n"
	"ATTGAATCCCGAAAGAGAAT\n"
	"GCCCCATGGGTCCACCTGGA\n"
	"GGCTTCGAGCTCATCTAGAT\n"
	"CCCTCAGTCTGCAGGGCTCC\n"
	"GAATGTCCCAAGCCTTTGAG\n"
	"GTGCCCGCCCCTGCATCCCT\n"
	"GCCTGCTACTGACCCTGCAG\n"
	"GAATCGGATATAACATCATC\n"
	"ATACCCCTGATTCACCGAGC\n"
	"GTTCCTGGATGCCTATGCTG\n"
	"GTACTGACAGACCCAGAAGC")

matches = re.finditer(regex, test_str, re.MULTILINE)

for matchNum, match in enumerate(matches, start=1):
    
    print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))
    
    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
